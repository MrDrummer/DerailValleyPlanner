@using Microsoft.EntityFrameworkCore
@using DerailValleyPlanner.Data
@using DerailValleyPlanner.Models
@using System.Collections.ObjectModel
@using System.Linq


@* SelectedValuesChanged="JobsChanged" *@
@* @bind-SelectedValues="@Jobs" *@
<MudSelect T="Job" ToStringFunc="@_converter" Label="@Label" SelectedValues="@Jobs" SelectedValuesChanged="@JobsChanged" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
@* <MudSelect T="Job" ToStringFunc="@_converter" Label="@Label" @bind-SelectedValues="@TempJobs" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"> *@
    @foreach (var job in _jobList)
    {
        <MudSelectItem T="Job" Value="@job">@job.ConsistId</MudSelectItem>
    }
</MudSelect>

@code {
    [Inject]
    private PlannerContext PlannerContext { get; set; }
    
    [Parameter]
    public string Label { get; set; }
    
    [Parameter]
    public Stop.Kind Type { get; set; }

    [Parameter]
    public IEnumerable<Job> Jobs { get; set; }

    private IEnumerable<Job> TempJobs { get; set; }
    
    [Parameter]
    public string Yard { get; set; }
    
    [Parameter]
    public EventCallback<IEnumerable<Job>> JobsChanged { get; set; }

    private IEnumerable<Job> _jobList = new HashSet<Job>();

    
    protected override async Task OnInitializedAsync()
    {
        await GetJobs();
    }

    async Task GetJobs()
    {
        var jobs = PlannerContext.Jobs;
        IQueryable<Job> query;
        
        switch (Type)
        {
            case Stop.Kind.Load:
                query = jobs.Where(j => j.FromYard == Yard);
                break;
            case Stop.Kind.Unload:
                query = jobs.Where(j => j.ToYard == Yard);
                break;
            case Stop.Kind.Via:
            default:
                _jobList = new HashSet<Job>();
                return;
        }
        
        _jobList = await query.ToListAsync();
        // _jobList = await PlannerContext.Jobs.ToListAsync();
    }
    
    Func<Job, string> _converter = p => p?.ConsistId;
}