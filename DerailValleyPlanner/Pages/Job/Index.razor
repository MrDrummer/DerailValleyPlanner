@page "/job"

@using DerailValleyPlanner.Models
@using DerailValleyPlanner.Data
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavManager
<MudText Typo="Typo.h3">Jobs</MudText>

<MudButton OnClick="GoToCreatePage" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">New</MudButton>
@if (_jobs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudDataGrid
        Items="@_jobs"
        T="Job"
        Filterable="true"
        SortMode="SortMode.Multiple"
        Groupable="false"
        Dense="true"
    >
        <Columns>
            <PropertyColumn Property="j => j.JobId" Title="Internal ID" />
            <PropertyColumn Property="j => j.ConsistId" Title="Consist ID"/>
            @* <PropertyColumn Property="j => j.FromYard" Title="From Yard"/> *@
            <TemplateColumn>
                <CellTemplate>
                    <YardDisplay YardCode="@context.Item.FromYard"></YardDisplay>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="j => j.FromTrack" Title="From Track"/>
            @* <PropertyColumn Property="j => j.ToYard" Title="To Yard"/> *@
            <TemplateColumn>
                <CellTemplate>
                    <YardDisplay YardCode="@context.Item.ToYard"></YardDisplay>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="j => j.ToTrack" Title="To Track"/>
            <PropertyColumn Property="j => j.Mass.ToString() + 't'" Title="Mass"/>
            <PropertyColumn Property="j => j.Length.ToString() + 'm'" Title="Length"/>
            <PropertyColumn Property="j => j.Wagons" Title="Wagon Count"/>
            <PropertyColumn Property="j => '$' + j.Pays.ToString()" Title="Pays"/>
            <PropertyColumn Property="j => j.Description" Title="Description"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudMenu Icon="fad fa-ellipsis-vertical" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                        <MudMenuItem OnClick="() => GoToEditPage(context)">Edit</MudMenuItem>
                        <MudMenuItem>Delete</MudMenuItem>
                    </MudMenu>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    private IEnumerable<Job> _jobs;

    [Inject]
    private PlannerContext PlannerContext { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GetJobs();
    }

    async Task GetJobs()
    {
        _jobs = await PlannerContext.Jobs.ToListAsync();
    }

    void GoToCreatePage()
    {
        NavManager.NavigateTo("/job/create");
    }

    void GoToEditPage(CellContext<Job> context)
    {
        NavManager.NavigateTo($"/job/edit/{context.Item.JobId}");
    }
}