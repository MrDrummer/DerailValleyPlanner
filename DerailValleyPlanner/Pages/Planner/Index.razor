@page "/planner"
@* @page "/planner/{EditMode}" *@

@using DerailValleyPlanner.Models
@using DerailValleyPlanner.Data
@using Microsoft.EntityFrameworkCore
@inject ISnackbar Snackbar
@*
- Will list all Yards and the summary for each (total jobs, wagons, length, mass and money totalled) load and unload
- Allows child component? Or mode that allows selecting a yard to add?
 *@
<MudText Typo="Typo.h3">Journey Planner</MudText>
<MudSwitch @bind-Checked="@ReadOnly">Edit Mode</MudSwitch>

<MudTable
    Items="@_stops"
    T="Stop"
    Dense="true"
    Hover="true"
    CanCancelEdit="true"
    ReadOnly="@(!ReadOnly)"
    @bind-SelectedItem="selectedItem"
    CommitEditTooltip="Commit Edit"
    OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
    RowEditPreview="BackupItem"
    RowEditCancel="ResetItemToOriginalValues"
    RowEditCommit="ItemHasBeenCommitted"
    ApplyButtonPosition="@TableApplyButtonPosition.End"
    EditButtonPosition="@TableEditButtonPosition.End"
    EditTrigger="@TableEditTrigger.EditButton"
>
    <HeaderContent>
        @if (!ReadOnly)
        {
            <MudTh>Index</MudTh>
        }
        <MudTh>Yard</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Note</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (!ReadOnly)
        {
            <MudTd DataLabel="Index">@context.Index</MudTd>
        }
        <MudTd DataLabel="Yard">@context.Yard</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Index">Up Down</MudTd>
        <MudTd DataLabel="Yard">
            <YardSelection @bind-Yard="@context.Yard"></YardSelection>
        </MudTd>
        <MudTd DataLabel="Type">Dropdown</MudTd>
        <MudTd DataLabel="Note">Text box</MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code {
    
    [Inject]
    private PlannerContext Context { get; set; }
    
    // [Parameter] public string EditMode { get; set; }

    private bool ReadOnly = true;

    private Stop selectedItem;
    private Stop EditCache;
    private IEnumerable<Stop> _stops;
    
    protected override async Task OnInitializedAsync()
    {
        await GetStops();
    }

    async Task GetStops()
    {
        _stops = await Context.Stops.OrderBy(s => s.Index).ToListAsync();
    }

    private void BackupItem(object stopObj)
    {
        var stop = (Stop)stopObj;
        EditCache = new Stop
        {
            Index = stop.Index,
            StopId = stop.StopId,
            Type = stop.Type,
            Jobs = stop.Jobs,
            Yard = stop.Yard,
            Note = stop.Note
        };
        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object stopObj)
    {
        var stop = (Stop)stopObj;

        Context.Stops.Update(stop);
        
        await Context.SaveChangesAsync();
        
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object stopObj)
    {
        var stop = (Stop)stopObj;
        stop.Index = EditCache.Index;
        stop.StopId = EditCache.StopId;
        stop.Type = EditCache.Type;
        stop.Jobs = EditCache.Jobs;
        stop.Yard = EditCache.Yard;
        stop.Note = EditCache.Note;
        StateHasChanged();
    }
    
    
}