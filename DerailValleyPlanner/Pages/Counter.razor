@page "/counter"
<MudSelect T="Pizza" ToStringFunc="@converter" @bind-SelectedValues="@pizzas" MultiSelection="true" Label="Select your pizza" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
    <MudSelectItem T="Pizza" Value="@(new Pizza() { Name="Cardinale"})" />
    <MudSelectItem T="Pizza" Value="@(new Pizza() { Name="Diavolo"})" />
    <MudSelectItem T="Pizza" Value="@(new Pizza() { Name="Margarita"})" />
    <MudSelectItem T="Pizza" Value="@(new Pizza() { Name="Spinaci"})" />
</MudSelect>

<MudText Typo="Typo.h6" Class="mud-width-full">Pizzas Selected:</MudText>
<MudText Typo="Typo.caption" Class="mud-width-full">@pizzas.Count</MudText>
@code {
    List<Pizza> pizzas = new()
    {
        new Pizza { Name = "Diavolo" },
        new Pizza { Name = "Cardinale" }
    };

    public class Pizza
    {
        public string Name { get; set; }

        // Note: this is important so the select can compare pizzas
        public override bool Equals(object o) {
            var other = o as Pizza;
            return other?.Name==Name;
        }
        
        // Note: this is important so the select can compare pizzas
        public override int GetHashCode() => Name.GetHashCode();
    }

    Func<Pizza,string> converter = p => p?.Name;

    protected override void OnParametersSet()
    {
        
    }
}